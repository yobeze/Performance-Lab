#include <stdio.h>
#include "cs1300bmp.h"
#include <iostream>
#include <algorithm>
#include <fstream>
#include <stdlib.h>
#include "Filter.h"
#include <omp.h>
using namespace std;

#include "rdtsc.h"
//
// Forward declare the functions
//
Filter * readFilter(string filename);
double applyFilter(Filter *filter, cs1300bmp *input, cs1300bmp *output);

int
main(int argc, char **argv)
{

  if ( argc < 2) {
    fprintf(stderr,"Usage: %s filter inputfile1 inputfile2 .... \n", argv[0]);
  }

  //
  // Convert
   C++ strings to simplify manipulation
  //
  string filtername = argv[1];

  //
  // remove any ".filter" in the filtername
  //
  string filterOutputName = filtername;
  string::size_type loc = filterOutputName.find(".filter");
  if (loc != string::npos) {
    //
    // Remove the ".filter" name, which should occur on all the provided filters
    //
    filterOutputName = filtername.substr(0, loc);
  }

  Filter *filter = readFilter(filtername);

  double sum = 0.0;
  int samples = 0;

  for (int inNum = 2; inNum < argc; inNum++) {
    string inputFilename = argv[inNum];
    string outputFilename = "filtered-" + filterOutputName + "-" + inputFilename;
    struct cs1300bmp *input = new struct cs1300bmp;
    struct cs1300bmp *output = new struct cs1300bmp;
    int ok = cs1300bmp_readfile( (char *) inputFilename.c_str(), input);

    if ( ok ) {
      double sample = applyFilter(filter, input, output);
      sum += sample;
      samples++;
      cs1300bmp_writefile((char *) outputFilename.c_str(), output);
    }
    delete input;
    delete output;
  }
  fprintf(stdout, "Average cycles per sample is %f\n", sum / samples);

}

class Filter *
readFilter(string filename)
{
  ifstream input(filename.c_str());

  if ( ! input.bad() ) {
    int size = 0;
    input >> size;
    Filter *filter = new Filter(size);
    int div;
    input >> div;
    filter -> setDivisor(div);
    for (int i=0; i < size; i++) {
      for (int j=0; j < size; j++) {
	int value;
	input >> value;
	filter -> set(i,j,value);
      }
    }
    return filter;
  } else {
    cerr << "Bad input in readFilter:" << filename << endl;
    exit(-1);
  }
}
  double applyFilter(class Filter *filter, cs1300bmp *input, cs1300bmp *output)
  {

  long long cycStart, cycStop;

  cycStart = rdtscll();
  //create local var
  cs1300bmp * __restrict local = input;
  int w = output -> width = local -> width;
  int h = output -> height = local -> height;
  w = w - 1;
  h = h - 1;

  float div = (1.0/(filter -> getDivisor()));
    for(int row = 1; row < h; row++) 
    {
      for(int col = 1; col < w; col++) 
      {
  // int plane = 0;
      output -> color[0][row][col] = 0;
      output -> color[1][row][col] = 0;
      output -> color[2][row][col] = 0;

      for (int j = 0; j < 3; j++) { //getSize will always be 3
        for (int i = 0; i < 3; i++) { 
          output -> color[0][row][col]
            = output -> color[0][row][col] //
            + (local -> color[0][row + i - 1][col + j - 1] 
         * filter -> get(i, j) );
            output -> color[1][row][col]
            = output -> color[1][row][col]
            + (local -> color[1][row + i - 1][col + j - 1] 
         * filter -> get(i, j) );
            output -> color[2][row][col]
            = output -> color[2][row][col]
            + (local -> color[2][row + i - 1][col + j - 1] 
         * filter -> get(i, j) );
        }
      }
    if (div != 1)
    {
      output -> color[0][row][col] *= div;  
    
      output -> color[1][row][col] *= div;
        
      output -> color[2][row][col] *= div;
    }
    
    if ( output -> color[0][row][col]  < 0 ) {
      output -> color[0][row][col] = 0;
    }  if ( output -> color[1][row][col]  < 0 ) {
      output -> color[1][row][col] = 0;
    }  if ( output -> color[2][row][col]  < 0 ) {
      output -> color[2][row][col] = 0;
    }

    if ( output -> color[0][row][col]  > 255 ) { 
      output -> color[0][row][col] = 255;
    }
      if ( output -> color[1][row][col]  > 255 ) { 
      output -> color[1][row][col] = 255;
    }
      if ( output -> color[2][row][col]  > 255 ) { 
      output -> color[2][row][col] = 255;
    }
  // /////////////////// 2nd iteration
  // plane = 1;
  //   output -> color[plane][row][col] = 0;

  // for (int j = 0; j < filter -> getSize(); j++) { //getSize will always be 3
  //   for (int i = 0; i < filter -> getSize(); i++) { 
  //     output -> color[plane][row][col]
  //       = output -> color[plane][row][col]
  //       + (input -> color[plane][row + i - 1][col + j - 1] 
  //    * filter -> get(i, j) );
  //   }
  // }
  
  // output -> color[plane][row][col] =  
  //   output -> color[plane][row][col] / filter -> getDivisor();

  // if ( output -> color[plane][row][col]  < 0 ) {
  //   output -> color[plane][row][col] = 0;
  // }

  // if ( output -> color[plane][row][col]  > 255 ) { 
  //   output -> color[plane][row][col] = 255;
  // }

  // ///////////////// 3rd iteration
  // plane = 2;
  //   output -> color[plane][row][col] = 0;

  // for (int j = 0; j < filter -> getSize(); j++) { //getSize will always be 3
  //   for (int i = 0; i < filter -> getSize(); i++) { 
  //     output -> color[plane][row][col]
  //       = output -> color[plane][row][col]
  //       + (input -> color[plane][row + i - 1][col + j - 1] 
  //    * filter -> get(i, j) );
  //   }
  // }
  
  // output -> color[plane][row][col] =  
  //   output -> color[plane][row][col] / filter -> getDivisor();

  // if ( output -> color[plane][row][col]  < 0 ) {
  //   output -> color[plane][row][col] = 0;
  // }

  // if ( output -> color[plane][row][col]  > 255 ) { 
  //   output -> color[plane][row][col] = 255;
  // }

    }
  }
  

  cycStop = rdtscll();
  double diff = cycStop - cycStart;
  double diffPerPixel = diff / (output -> width * output -> height);
  fprintf(stderr, "Took %f cycles to process, or %f cycles per pixel\n",
	  diff, diff / (output -> width * output -> height));
  return diffPerPixel;
  }
/*
  int plane = 0;
  for(int plane = 0; plane < 3; plane++) {

  output -> color[plane][row][col] = 0;

  for (int j = 0; j < filter -> getSize(); j++) { //getSize will always be 3
    for (int i = 0; i < filter -> getSize(); i++) { 
      output -> color[plane][row][col]
        = output -> color[plane][row][col]
        + (input -> color[plane][row + i - 1][col + j - 1] 
     * filter -> get(i, j) );
    }
  }
  
  output -> color[plane][row][col] =  
    output -> color[plane][row][col] / filter -> getDivisor();

  if ( output -> color[plane][row][col]  < 0 ) {
    output -> color[plane][row][col] = 0;
  }

  if ( output -> color[plane][row][col]  > 255 ) { 
    output -> color[plane][row][col] = 255;
  }
      }
*/